{"version":3,"sources":["components/characters/Card.js","components/header/header.js","components/container/Container.js","App.js","index.js"],"names":["Card","props","className","id","onClick","handleClick","alt","name","src","image","Header","score","topScore","Container","children","randomShuffle","array","i","length","j","Math","floor","random","temp","App","state","characters","correctIncorrect","clicked","indexOf","handleIncrement","setState","concat","handleReset","newScore","currentScore","handleShuffle","shuffledCharacters","this","message","class","map","character","clickedImage","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"q7BAYeA,G,MATF,SAACC,GACV,OACI,qBAAKC,UAAU,OAAOC,GAAIF,EAAME,GAAIC,QAAS,kBAAMH,EAAMI,YAAYJ,EAAME,KAA3E,SACI,qBAAKD,UAAU,gBAAf,SACI,qBAAKI,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,c,MCElCC,MANf,SAAgBT,GACZ,OAAO,sBAAKC,UAAU,SAAf,cAAyB,6BAAI,qEACpC,6FACA,6BAAI,6CAAgBD,EAAMU,MAAtB,iBAA2CV,EAAMW,kBCF1CC,EAFG,SAAAZ,GAAK,OAAI,qBAAKC,UAAU,YAAf,SAA4BD,EAAMa,Y,OCK7D,SAASC,EAAcC,GACrB,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAE,IAClCM,EAAOP,EAAMC,GACjBD,EAAMC,GAAKD,EAAMG,GACjBH,EAAMG,GAAKI,EAEb,OAAOP,E,IA+EMQ,E,4MA1EbC,MAAQ,CACNC,aACAf,MAAO,EACPC,SAAU,EACVe,iBAAkB,GAClBC,QAAS,I,EAIXvB,YAAc,SAAAF,IAC4B,IAApC,EAAKsB,MAAMG,QAAQC,QAAQ1B,IAC7B,EAAK2B,kBACL,EAAKC,SAAS,CAAEH,QAAS,EAAKH,MAAMG,QAAQI,OAAO7B,MAEnD,EAAK8B,e,EAITH,gBAAkB,WAChB,IAAMI,EAAW,EAAKT,MAAMU,aAAe,EAC3C,EAAKJ,SAAS,CACZI,aAAcD,EACdP,iBAAkB,aAEhBO,GAAY,EAAKT,MAAMb,SACzB,EAAKmB,SAAS,CAAEnB,SAAUsB,IAEN,KAAbA,GACP,EAAKH,SAAS,CAAEJ,iBAAkB,YAEpC,EAAKS,iB,EAGPH,YAAc,WACZ,EAAKF,SAAS,CACZI,aAAc,EACdvB,SAAU,EAAKa,MAAMb,SACrBe,iBAAkB,SAClBC,QAAS,KAEX,EAAKQ,iB,EAGPA,cAAgB,WACd,IAAIC,EAAqBtB,EAAcW,GACvC,EAAKK,SAAS,CAAEL,WAAYW,K,uDAGpB,IAAD,OACP,OACE,eAAC,EAAD,WACG,cAAC,EAAD,CACG1B,MAAO2B,KAAKb,MAAMd,MAClB4B,QAASD,KAAKb,MAAMc,QACpB3B,SAAU0B,KAAKb,MAAMb,WACzB,qBAAK4B,MAAM,YAAX,SACE,qBAAKA,MAAM,MAAX,SACGF,KAAKb,MAAMC,WAAWe,KAAI,SAAAC,GAAS,OAClC,cAAC,EAAD,CACEvC,GAAIuC,EAAUvC,GAEdI,KAAMmC,EAAUnC,KAChBE,MAAOiC,EAAUjC,MACjBkC,aAAc,EAAKA,cAHdD,EAAUvC,kB,GA9DbyC,aCXlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.d70db026.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\"\n\nconst Card = (props) => {\n    return (\n        <div className=\"card\" id={props.id} onClick={() => props.handleClick(props.id)}>\n            <div className=\"img-container\">\n                <img alt={props.name} src={props.image} />\n            </div>\n        </div>\n    );\n}\nexport default Card;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Header(props) {\n    return <div className=\"header\"> <h1><strong>Samurai Champloo Clicky Game!</strong></h1>\n    <h3>Click on a character but don't click on the same one twice!</h3>\n    <h4><strong>Score: {props.score} | Top Score: {props.topScore}</strong></h4>\n    </div>\n}\nexport default Header;","import React from \"react\"\n\nconst Container = props => <div className=\"container\">{props.children}</div>\n\nexport default Container","import React, { Component } from \"react\"\nimport Card from \"./components/characters/Card\";\nimport Header from \"./components/header/header\";\nimport Container from \"./components/container/Container\";\nimport characters from \"./characters.json\"\n\n// Random shuffle of characters\nfunction randomShuffle(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i+1));\n    let temp = array[i];\n    array[i] = array[j];\n    array[j] = temp\n  }\n  return array\n};\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n    characters,\n    score: 0,\n    topScore: 0,\n    correctIncorrect: \"\",\n    clicked: [],\n  };\n\n  \n  handleClick = id => {\n    if (this.state.clicked.indexOf(id) === -1) {\n      this.handleIncrement();\n      this.setState({ clicked: this.state.clicked.concat(id) });\n    } else {\n      this.handleReset();\n    }\n  };\n\n  handleIncrement = () => {\n    const newScore = this.state.currentScore + 1;\n    this.setState({\n      currentScore: newScore,\n      correctIncorrect: \"Correct!\"\n    });\n    if (newScore >= this.state.topScore) {\n      this.setState({ topScore: newScore });\n    }\n    else if (newScore === 12) {\n      this.setState({ correctIncorrect: \"Winner!\" });\n    }\n    this.handleShuffle();\n  };\n\n  handleReset = () => {\n    this.setState({\n      currentScore: 0,\n      topScore: this.state.topScore,\n      correctIncorrect: \"Wrong!\",\n      clicked: []\n    });\n    this.handleShuffle();\n  };\n\n  handleShuffle = () => {\n    let shuffledCharacters = randomShuffle(characters);\n    this.setState({ characters: shuffledCharacters });\n  };\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    return (    \n      <Container>\n         <Header\n            score={this.state.score}\n            message={this.state.message}\n            topScore={this.state.topScore} />\n        <div class=\"container\"> \n          <div class=\"row\">\n            {this.state.characters.map(character => (\n              <Card\n                id={character.id}\n                key={character.id}\n                name={character.name}\n                image={character.image}\n                clickedImage={this.clickedImage}\n                />\n            ))}\n            </div>\n        </div>\n      </Container>\n    ); \n  }\n}\n\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}